#!/usr/bin/env python

# Gildas Lepennetier script


# Algo levenshtein from wiki and from:
# Christopher P. Matthews
# christophermatthews1985@gmail.com
# Sacramento, CA, USA
import sys,argparse

def levenshtein(s, t):
        ''' From Wikipedia article; Iterative with two matrix rows. '''
        if s == t: return 0
        elif len(s) == 0: return len(t)
        elif len(t) == 0: return len(s)
        v0 = [None] * (len(t) + 1)
        v1 = [None] * (len(t) + 1)
        for i in range(len(v0)):
            v0[i] = i
        for i in range(len(s)):
            v1[0] = i + 1
            for j in range(len(t)):
                cost = 0 if s[i] == t[j] else 1
                v1[j + 1] = min(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost)
            for j in range(len(v0)):
                v0[j] = v1[j]
        return v1[len(t)]
if __name__ == "__main__":
	
	parser = argparse.ArgumentParser(description="Calculate the Levenshtein distance between sequences. (At least two sequences)",epilog='Author: Gildas Lepennetier')

	parser.add_argument(nargs='+',dest="seqs")
	
	parser.add_argument('-o',action='store_true',default=False,help='If you have only two sequences and you want only the score')
	parser.add_argument('-q',action='store_true',default=False,help='be quiet')
	
	parser.add_argument('-i',action='store_true',default=False,help='To make the function case insensitive')
	parser.add_argument('--version', action='version', version='%(prog)s 2017')#version display
	parser.add_argument('--copy',action='store_true',help='Display Copyright informations')
	parser.add_argument('--author',action='store_true',help='Display author informations')
	args=vars(parser.parse_args())
		
	if args['author']:
		print ("LEPENNETIER Gildas - gildas.lepennetier@hotmail.fr")
		exit()
	if args['copy']:
		print ("Copyright 2014 LEPENNETIER Gildas")
		exit()
	if args['i']:
		args['seqs'] = [ el.upper() for el in args['seqs'] ]
	
	if len(args['seqs']) <2 and not args ['q']:
		sys.stderr.write("ERROR: levenshtein distance needs at least 2 sequences\n")
		exit(1)
	
	if len(args['seqs']) == 2 and args['o']:
		print( levenshtein( args['seqs'][0],args['seqs'][1] ) )
	else:
		if args['o'] and not args ['q']:
			sys.stderr.write("WARNING: option -o is ignored since you have more than 2 sequences to compare\n")
		for index1 in range( 0, len(args['seqs'])-1 ):
			for index2 in range( index1+1, len(args['seqs']) ):
				seq1=args['seqs'][index1]
				seq2=args['seqs'][index2]
				print ( "%s\t%s\t%s"%(levenshtein( seq1,seq2 ),seq1,seq2) )

	
	