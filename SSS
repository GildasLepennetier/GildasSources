#!/usr/bin/python
# -*- coding: utf-8 -*-
import sys
#### In case of problem: test
USAGE="usage: file.csv Col5ss Col3ss freqA freqC freqG freqT\
\n\tnote: the sss will be computed based on the conservation of this list of introns\
\n\tplease be carefull if low number of introns\
\nAuthor: Gildas Lepennetier - gildas.lepennetier@hotmail.fr\
\nCopyright 2014 LEPENNETIER Gildas\
\n"
if len(sys.argv) != 8:
	print (USAGE)
	exit()
# open the files #update: not using the with statement
def LoadLines(path):
	F1=open(path, 'r')
	LIST=F1.readlines()
	F1.close()
	return LIST
# remove the "end of line" character
def rmEndLine(ListOfLine):
	ListReturn = []
	for line in ListOfLine:
		if line[-1:] == '\n':
			if line[-2:-1] == '\r':
				ListReturn.append(line.split('\r\n')[0])
			else:
				ListReturn.append(line.split('\n')[0])
	return ListReturn
##############################################################################
# EXTRACT LIST OF LETTERS FROM LIST OF SEQUENCES
# return list of letter at index x in a given sequence list (list of letters in position 1...)
def get_letterList_at_index(list_seq, index):
	letterlist=[]
	for ss in list_seq:
		letterlist.append(ss[index])
	return letterlist
##############################################################################
# EXTRACT LIST OF LETTERS FROM LIST OF SEQUENCES
# backgroundFreq doit Ãªtre un dico{'letter':freq, ..., 'nb':nbtotal}
# positionFreq aussi: dico des freqs, a la position de la lettre
def splice_site_strength(seq, backgroundFreq, positionFreq):
	import math
	if seq:
		liste_return=[]
		i=0
		for letter in seq:
			dico1 = positionFreq[i]
			freqXi = dico1[letter.upper()]
			freqX = backgroundFreq[letter.upper()]
			liste_return.append(math.log(freqXi/freqX))
			i+=1
		return sum(liste_return)
	else:
		print "empty seq"
##############################################################################
# COUNT OF LETTER 
# return dico of frequency for each letter in letter list
# on peut lui donner une liste ou bien une sequence
def countLetters(string, case=False, freq=True, removeNn=False):
	#dico={}
	dico={'A':0,'C':0,'G':0,'T':0}
	if string:
		nb_letters=float(0)
		for letter in string:
			nb_letters+=1
			if removeNn:
				if letter in ['n','N']:
					nb_letters -=1
					continue
			if not case: #no matter the case
				if letter.upper() in dico.keys():
					dico[letter.upper()]+=1
				else:
					dico[letter.upper()]=1
			else: #count upper and lower case
				if letter in dico.keys():
					dico[letter]+=1
				else:
					dico[letter]=1        
		# return number or frequency
		dico['nb']=nb_letters
		if freq:
			for key in dico.keys():
				if key not in ['nb']:
					dico[key] = dico[key]/nb_letters
			return dico
		else:
			return dico
	else:
		print "Error in countLetters : letters empty"
def countLettersList(stringList, case, freq, removeNn):
	dico_final={'A':0,'C':0,'G':0,'T':0,'nb':0}#need init at 0
	for string in stringList:
		dico = countLetters(string=string, case=case, freq=freq, removeNn=removeNn) #freq=false we want to count
		if dico:
			for K in dico.keys():
				if K in dico_final.keys():
					dico_final[K]=dico_final[K]+dico[K]
				else:
					dico_final[K]=dico[K]
	if freq:
		for key in dico_final:
			if key not in['nb']:
				try:
					dico_final[key] = float(dico_final[key])/float(dico_final['nb']) #compute the frequency (need float)
				except ZeroDivisionError:
					dico_final[key] = 0
	return dico_final
LINES = rmEndLine(LoadLines(sys.argv[1]))
FirstLine=LINES[0]
LINES=LINES[1:]
sep="\t"
indexCol5ss=int(sys.argv[2]) -1#real number of col in python
indexCol3ss=int(sys.argv[3]) -1
freqA=float(sys.argv[4])
freqC=float(sys.argv[5])
freqG=float(sys.argv[6])
freqT=float(sys.argv[7])
beforDonor=3
afterDonor=6
beforAccept=20
afterAccept=3
BGFreq={"A":freqA,"C":freqC,"G":freqG,"T":freqT}
print(sep.join([FirstLine,"SSS5","SSS3"]))
ss5=[]
for line in LINES:#load all 5'
	try:
		ss5.append(line.split(sep)[indexCol5ss])
	except:
		continue
ss3=[]
for line in LINES:#load all 3'
	try:
		ss3.append(line.split(sep)[indexCol3ss])
	except:
		continue
PosFreq5=[]
for indexPosition in range( 0,beforDonor+afterDonor,1 ):
	letterList5=get_letterList_at_index(ss5, indexPosition)
	PosFreq5.append( countLettersList(stringList=letterList5, case=False, freq=True, removeNn=False) )
PosFreq3=[]
for indexPosition in range( 0,beforAccept+afterAccept,1 ):
	letterList3=get_letterList_at_index(ss3, indexPosition)
	PosFreq3.append( countLettersList(stringList=letterList3, case=False, freq=True, removeNn=False) )
for line in LINES:
	try:
		SSS5=splice_site_strength(seq=line.split(sep)[indexCol5ss], backgroundFreq=BGFreq, positionFreq=PosFreq5)
		SSS3=splice_site_strength(seq=line.split(sep)[indexCol3ss], backgroundFreq=BGFreq, positionFreq=PosFreq3)
	except KeyError:
		SSS5=""
		SSS3=""
	print(sep.join([line,str(SSS5),str(SSS3)]))