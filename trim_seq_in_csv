#!/usr/bin/python3
import sys,argparse
parser = argparse.ArgumentParser(description='Trim the sequences of a csv-like file.',epilog='Author: Gildas Lepennetier: gildas.lepennetier@hotmail.fr')
parser.add_argument('-in', required=False, type=argparse.FileType('r'),default=sys.stdin, help='input file')
parser.add_argument('-out', required=False, type=argparse.FileType('w'),default=sys.stdout, help='output file')
parser.add_argument('-cmd',type=str,required=True,help='command to execute: [replace|add|extract] replace: replace in situ ; add: add sequence at the end as a new column ; extract: return only trimmed column')
parser.add_argument('-header',action='store_true',default=False,help='add this flag if file have a header (first line with names)')
parser.add_argument('-col',type=int,required=True,help='column number where is the sequence')
parser.add_argument('-beg',type=int,required=True,help='number of letters to trim at the beginning')
parser.add_argument('-end',type=int,required=True,help='number of letters to trim at the end')
parser.add_argument('-sep',type=str,default='\t',required=False,help='separator (default: \\t)')
parser.add_argument('-endline',type=str,default='\n',required=False,help='separator (default: unix \\n)')
parser.add_argument('--version', action='version', version='%(prog)s 07-14-2014')#version display
parser.add_argument('--copy',action='store_true',help='Display Copyright informations')
parser.add_argument('--author',action='store_true',help='Display author informations')
args=vars(parser.parse_args())
if args['author']:
    print ("LEPENNETIER Gildas - gildas.lepennetier@hotmail.fr")
    exit()
if args['copy']:
    print ("Copyright 2014 LEPENNETIER Gildas")
    exit()
if args['cmd'] not in ['replace','add','extract']:
    sys.stderr.write('Error, cmd not correct, choose in [replace|add|extract] (-h for help)')
    exit()
index_col=int(args['col'])-1
beg=int(args['beg'])
end=int(args['end'])
if beg < 0:
    beg=-beg
    sys.stderr.write('Warning: beg had to be positive. Auto-inversion (beg = - beg)' + args['endline'])
if end < 0:
    end=-end
    sys.stderr.write('Warning: end had to be positive. Auto-inversion (end = - end)' + args['endline'])
k=0 #if error
LINES=args['in'].readlines()
if args['header']:
    k+=1
    line=LINES[0].split(args['endline'])[0].split(args['sep'])
    newName=str(line[index_col])+"_trim#%s#%s"%(beg,end)
    if args['cmd'] == 'replace':
        line[index_col]=newName
        args['out'].write( args['sep'].join( [str(el) for el in line ] ) + args['endline'] )
    if args['cmd'] == 'add':
        args['out'].write( args['sep'].join( [str(el) for el in line + [newName] ] ) + args['endline'] )
    if args['cmd'] == 'extract':
        args['out'].write(newName + args['endline'] )
    LINES=LINES[1:]
for rline in LINES:
    k+=1
    line=rline.split(args['endline'])[0].split(args['sep'])
    if len(line[index_col]) > beg+end:
        newString=str(line[index_col][ beg : -end ])
    else:
        newString=str()
        sys.stderr.write('Warning: sequence too short line %s - row will be empty'%(k) + args['endline'] )
    #commandes: replace in situ
    if args['cmd'] == 'replace':
        line[index_col]=newString
        args['out'].write( args['sep'].join( [str(el) for el in line ] ) + args['endline'] )
    if args['cmd'] == 'add':
        args['out'].write( args['sep'].join( [str(el) for el in line + [newString] ] ) + args['endline'] )
    if args['cmd'] == 'extract':
        args['out'].write( newString + args['endline'] )
