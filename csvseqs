#!/usr/bin/python
import sys,argparse

def check_negative(value):
    ivalue = int(value)
    if ivalue < 0:
         raise argparse.ArgumentTypeError("%s is an invalid positive int value" % value)
    return ivalue

parser = argparse.ArgumentParser(description='Manipulate sequences of a csv-like file. Trim / extract substrings.\
You can either: \
1) Trim X letters at the begining and end of the sequence; \
2) Keep only X letters at the beggining or end (keep only the extremities); \
3) Extract from-to using begining or end of the sequence as reference (example:). \
Some options exludes the others (you can not keep at the beginning and the end in the same time).',epilog='Author: Gildas Lepennetier: gildas.lepennetier@hotmail.fr')
parser.add_argument('-in', required=False, type=argparse.FileType('r'),default=sys.stdin, help='input file')
parser.add_argument('-out', required=False, type=argparse.FileType('w'),default=sys.stdout, help='output file')
parser.add_argument('-OutForm',type=str,default="add",help='Format of the output: [add (default)|replace|extract] add: add sequence at the end as a new column; replace: replace in situ ; extract: return only trimmed column')
parser.add_argument('-col',type=int,required=True,help='column number where is the sequence')
parser.add_argument('-header',action='store_true',default=False,help='add this flag if file have a header (first line with names)')
parser.add_argument('-CMD',type=str,required=True,help='Command to execute: [TRIM|KEEP|EXTRACT], \
TRIM to remove sequences from the extremities (beginning, end, both), \
KEEP X leters at the beginning or the end (only one option), \
EXTRACT from-to using beginning or end of the sequence as reference.')

parser.add_argument('-beg',type=int,required=False,help='TRIM X letters at the beginning')
parser.add_argument('-end',type=int,required=False,help='TRIM X letters at the end')

parser.add_argument('-keepbeg',type=int,required=False,help='KEEP X letters at the beginning')
parser.add_argument('-keepend',type=int,required=False,help='KEEP X letters at the end (ignored if given with keepbeg)')

parser.add_argument('-frombeg',type=int,required=False,help='EXTRACT from; after beginning (from before to)')
parser.add_argument('-tobeg',type=int,required=False,help='EXTRACT to; after beginning')

parser.add_argument('-fromend',type=int,required=False,help='EXTRACT from; before end (from before to)')
parser.add_argument('-toend',type=int,required=False,help='EXTRACT to; before end (form end and toend are ignored if frombeg and tobeg are present)')

parser.add_argument('-KeepPart',action='store_true',default=False,help='add this flag if you want to keep the sequences too short to be trimed (example: trying to trim 5 letters from a sequence of 4 letters, this option return the 4-letters sequence instead of empty string)')
parser.add_argument('-sep',type=str,default='\t',required=False,help='separator (default: \\t)')
parser.add_argument('-endline',type=str,default='\n',required=False,help='separator (default: unix \\n)')
parser.add_argument('--version', action='version', version='%(prog)s 07-14-2014')#version display
parser.add_argument('--copy',action='store_true',help='Display Copyright informations')
parser.add_argument('--author',action='store_true',help='Display author informations')
args=vars(parser.parse_args())

if args['author']:
    print ("LEPENNETIER Gildas - gildas.lepennetier@hotmail.fr")
    exit()
if args['copy']:
    print ("Copyright 2014 LEPENNETIER Gildas")
    exit()
if args['OutForm'] not in ['replace','add','extract']:
    sys.stderr.write('Error: OutForm not correct, choose in [replace|add|extract] (-h for help)')
    exit()


if args['CMD'] == 'TRIM':
    try:
        beg=int(args['beg'])
        end=int(args['end'])
        check_negative(beg)
        check_negative(end)
        namePart="beg%send%s"%(args['beg'],args['end'])
    except:
        sys.stderr.write("Error: you need to provide beg and end for the trim function."+args['endline'])
        exit()

if args['CMD'] == 'KEEP':
    try:
        keepbeg=int(args['keepbeg'])
        REF='beg'
        check_negative(keepbeg)
        namePart="keep%sbeg"%(args['keepbeg'])
    except:
        try:
            keepend=int(args['keepend'])
            REF='end'
            check_negative(keepend)
            namePart="keep%send"%(args['keepend'])
        except:
            sys.stderr.write("Error: check keepbeg OR keepend option"+args['endline'])
            exit()
    
            
if args['CMD'] == 'EXTRACT':
    try:
        frombeg=int(args['frombeg'])-1
        tobeg=int(args['tobeg'])
        REF='beg'
        check_negative(frombeg)
        check_negative(tobeg)
        namePart="beg%sto%s"%(args['frombeg'],args['tobeg'])
    except:
        try:
            fromend=int(args['fromend'])
            toend=int(args['toend'])-1
            REF='end'
            check_negative(fromend)
            check_negative(toend)
            namePart="end%sto%s"%(args['fromend'],args['toend'])
        except:
            sys.stderr.write("Error: you need to provide frombeg and tobeg OR fromend and toend for the extract function."+args['endline'])
            exit()
        
index_col=int(args['col'])-1
check_negative(index_col)

k=0 #for error
LINES=args['in'].readlines()
if args['header']:
    k+=1
    line=LINES[0].split(args['endline'])[0].split(args['sep'])

    newName=str(line[index_col])+"_%s_%s"%(args['CMD'],namePart)

    if args['OutForm'] == 'replace':
        line[index_col]=newName
        args['out'].write( args['sep'].join( [str(el) for el in line ] )+args['endline'] )
    if args['OutForm'] == 'add':
        args['out'].write( args['sep'].join( [str(el) for el in line + [newName] ] )+args['endline'] )
    if args['OutForm'] == 'extract':
        args['out'].write(newName+args['endline'] )
    LINES=LINES[1:]

for rline in LINES:
    k+=1
    line=rline.split(args['endline'])[0].split(args['sep'])
    SEQ=str(line[index_col])
    
    if args['CMD'] == 'TRIM':
        if len(SEQ) > beg+end: #check sequence size >= ??
            newString=SEQ[beg:] #trim beginning
            if end > 0:
                newString=newString[:-end]
        else:
            if args['KeepPart']:
                newString=SEQ
                sys.stderr.write('Warning: sequence too short to trim. line %s - sequence will not be complete (option -KeepPart activated)'%(k)+args['endline'] )
            else:
                newString=str()
                sys.stderr.write('Warning: sequence too short to trim. line %s - row will be empty'%(k)+args['endline'] )

    if args['CMD'] == 'KEEP':
        if REF == 'beg':
            if len(SEQ) > keepbeg:
                newString=SEQ[ : keepbeg ]
            else:
                if args['KeepPart']:
                    newString=SEQ
                    sys.stderr.write('Warning: sequence too short for keep. line %s - sequence will not be complete (option -KeepPart activated)'%(k)+args['endline'] )
                else:
                    newString=str()
                    sys.stderr.write('Warning: sequence too short to keep. line %s - row will be empty'%(k)+args['endline'] )
        if REF == 'end':
            if len(SEQ) > keepend:
                newString=SEQ[ -keepend : ]
            else:
                if args['KeepPart']:
                    newString=SEQ
                    sys.stderr.write('Warning: sequence too short for keep. line %s - sequence will not be complete (option -KeepPart activated)'%(k)+args['endline'] )
                else:
                    newString=str()
                    sys.stderr.write('Warning: sequence too short to keep. line %s - row will be empty'%(k)+args['endline'] )
                    
    if args['CMD'] == 'EXTRACT':
        if REF == 'beg':
            if len(SEQ) > tobeg:
                newString=SEQ[ frombeg : tobeg ]
            else:
                if args['KeepPart']:
                    newString=SEQ
                    sys.stderr.write('Warning: sequence too short for extraction. line %s - sequence will not be complete (option -KeepPart activated)'%(k)+args['endline'] )
                else:
                    newString=str()
                    sys.stderr.write('Warning: sequence too short to keep. line %s - row will be empty'%(k)+args['endline'] )
        if REF == 'end':
            if len(SEQ) > fromend:
                newString=SEQ[ -fromend : -toend ]
            else:
                if args['KeepPart']:
                    newString=SEQ
                    sys.stderr.write('Warning: sequence too short for extraction. line %s - sequence will not be complete (option -KeepPart activated)'%(k)+args['endline'] )
                else:
                    newString=str()
                    sys.stderr.write('Warning: sequence too short to keep. line %s - row will be empty'%(k)+args['endline'] )
    #commandes: replace in situ
    if args['OutForm'] == 'replace':
        line[index_col]=newString
        args['out'].write( args['sep'].join( [str(el) for el in line ] )+args['endline'] )
    if args['OutForm'] == 'add':
        args['out'].write( args['sep'].join( [str(el) for el in line + [newString] ] )+args['endline'] )
    if args['OutForm'] == 'extract':
        args['out'].write( newString+args['endline'] )
