#!/usr/bin/python
import sys,re,os,argparse,datetime
#### function to count pattern in string
def countPatternREGEXP(string,pattern):
	nb=0
	for m in re.finditer(pattern,string):
		nb+=1
	return nb
def posiStartPatternREGEXP(string,pattern):
	LIST=[]
	for m in re.finditer(pattern,string): #(m.start(), m.end(), m.group(0)) #position start, position end, object matched
		LIST.append( m.start() +1 ) #need to add 1 in the position match because start at 0
	return LIST
def posiEndPatternREGEXP(string,pattern):
	LIST=[]
	for m in re.finditer(pattern,string):
		LIST.append( m.end() +1 ) #need to add 1 in the position match because start at 0
	return LIST
#### Give the reverse complement of a DNA sequence, change also if iupac nucleotide ####
def revCompl_DNA(seq):
    reverse = []
    if seq:
        for letter in seq: #remplir avec le complementaire
            COR={"A":"T","a":"t","C":"G","c":"g","G":"C","g":"c","T":"A","t":"a",#usual ACGT, case conserve
                "R":"Y","r":"y","Y":"R","y":"r",#iupac R=A/G, Y=C/T
                "S":"W","s":"w","W":"S","w":"s",#S=G/C, W=A/T
                "K":"M","k":"m","M":"K","m":"k",#K=G/T, M=A/C
                "B":"V","b":"v","V":"B","v":"b",# B=C/G/T, V=A/C/G
                "D":"H","d":"h","H":"D","h":"d"}# D=A/G/T, H=A/C/T
            if letter in COR.keys():
                reverse.append(COR[letter])
            elif letter in ['u','U']:
                print ('error, must work on DNA, and I found nome U or u')
            else:
                reverse.append(letter)
        return ''.join(reverse[::-1]) #inverser
    else:
        return ""
parser = argparse.ArgumentParser(description='Find motif (pattern) in a csv-like file. Choose -action count to have the number of match OR -action position to get the coordinate (base 1) where the motif start.',epilog='Author: Gildas Lepennetier: gildas.lepennetier@hotmail.fr')
parser.add_argument('-in',type=argparse.FileType('r'),default=sys.stdin, help='input file')
parser.add_argument('-out',type=argparse.FileType('w'),default=sys.stdout, help='output file')
parser.add_argument('-action',default="count",type=str,help='which function to use? [ count ; position ]')
parser.add_argument('-sequence',type=int,help='column number for sequence')

parser.add_argument('-trim5',type=int,default=0,help='number of nt to trim from beginning of the sequence')
parser.add_argument('-trim3',type=int,default=0,help='number of nt to trim from end of the sequence')


parser.add_argument('-header',default=False,action='store_true',help='add this flag if you have a header')
parser.add_argument('-pattern','-e',type=str,help='pattern to search for (ex: CG for CpG). Handle python regular expression. A[AT]A for AAA or ATA. (ABC)|(BAG) for either ABC or BAG. You can give it in coma-separated values. Careful in terminal when using the *') #action='append', -> create a list
parser.add_argument('-label',type=str,help='Force this name as new column name. If several patterns, will be recycled. todo: coma separated label, but waiting to have use of it') #action='append', -> create a list

parser.add_argument('-seq_to_upper',default=False,action='store_true',help='convert the target sequence to upper case (avoid soft-masqued problems)')

parser.add_argument('-file_pattern',type=str,help='If the pattern to search are in a file, give the path.')
parser.add_argument('-rc',default=False,action='store_true',help='Search also the reverse complement.')
parser.add_argument('-kd',default=True,action='store_false',help='Keep duplicated pattern when provided. Default behavior is to avoid saving two columns for the same pattern.')
parser.add_argument('-separated',default=False,action='store_true',required=False,help='add this flag to get an output with only the result (default: add column in the file)')
parser.add_argument('-progress',default=False,action='store_true',help='add this flag if you want to have a progress estimate. this put also one flag --verbose')
parser.add_argument('-sep',type=str,default='\t',help='separator (default: \\t)')
parser.add_argument('--version', action='version', version='%(prog)s 12-17-2014')#version display
parser.add_argument('--verbose', '-v', action='count',default=0,help='add flag(s) to increase verbosity')# count the level of verbosity, +1 for each -v flag
parser.add_argument('--copy',action='store_true',help='Display Copyright informations')
parser.add_argument('--author',action='store_true',help='Display author informations')
args=vars(parser.parse_args())
if args['author']:
	print ("LEPENNETIER Gildas - gildas.lepennetier@hotmail.fr")
	exit()
if args['copy']:
	print ("Copyright 2014 LEPENNETIER Gildas")
	exit()
if args['action'] not in ['count','position']:
	sys.stderr.write("Error: bad keyword. Please select [ count ; position ]"+'\n')
	exit()
	

if not args['sequence']:
	sys.stderr.write("Error: argument -sequence is required"+'\n')
	parser.print_help()
	quit()
VERB_LVL=args['verbose']
IN=args['in']
OUT=args['out']
sep=args['sep']


PATTERNS=[]
if args['pattern']:
	for p in args['pattern'].split(','):
		if p and p not in ['','\n']:
			PATTERNS.append(p)
			if args['rc']:
				PATTERNS.append( revCompl_DNA(p) )
if args['file_pattern']:
	with open(args['file_pattern'], 'r') as fi:
		for line in fi.readlines():
			if line[0] in ['#']: #allow comments lines
				continue
			PATTERNS.append( line.split('\n')[0] )
			if args['rc']:
				PATTERNS.append( revCompl_DNA( line.split('\n')[0] ) )
if not PATTERNS:
	sys.stderr.write("Error: no pattern found. Please provide -pattern or -file_pattern is required"+'\n')
	parser.print_help()
	quit()
if not args['kd']: #remove duplicates. [x for x in a if x not in b] -> keep order, if one day...
	PATTERNS=list(set(PATTERNS))

NOTINFILE=args['separated']
seq_index=int(args['sequence'])-1
# MAIN #
Lines = IN.readlines()
if args['header']:
	FIRSTLINE=Lines[0].split('\n')[0].split(sep)
	if seq_index > len(FIRSTLINE):
		sys.stderr.write("Error: the index of the sequence (%s) was out of range, check the column"%args['sequence']+'\n')
		exit(1)
	
	if args['label']:
		COL_NAME=[ "%s"%(args['label']) for e in PATTERNS ]
	else:
		FirtLineNameCol=FIRSTLINE[seq_index] #get first line: extract name of the column (remove spaces)
		COL_NAME=[ "%s_%s_%s"%(FirtLineNameCol,e,args['action']) for e in PATTERNS ]
	
	if NOTINFILE:
		OUT.write( sep.join( COL_NAME ) + '\n' ) 
	else:
		OUT.write( sep.join( Lines[0].split('\n')[0].split(sep) + COL_NAME ) + '\n' )
	Lines=Lines[1:] #skip first line
kk=0
nbTot=len(Lines)
for line in Lines:
	splitLINE=line.split('\n')[0].split(sep)
	kk+=1
	if kk % 100 == 0 and args['progress']:
		sys.stderr.write("\r%s %% - (%s / %s) - %s"%( round(float(kk)/nbTot*100,1),kk,nbTot,datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
	if kk == nbTot and args['progress']:
		sys.stderr.write("\r%s %% - (%s / %s) - %s%s"%( round(float(kk)/nbTot*100,1),kk,nbTot,datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),'\n'))
	# sequence
	SEQ=splitLINE[seq_index]
	if args['seq_to_upper']:
		SEQ=SEQ.upper()
		
		
	OUTVALUE=[]
	
	if len(SEQ) > (args['trim5']+args['trim3']):
		SEQ=SEQ[  args['trim5'] : (len(SEQ)-args['trim3'])  ]
	else:
		SEQ=""
		
	for PATTERN in PATTERNS:
		if args['action'] == "count":
			OUTVALUE.append( countPatternREGEXP(SEQ,PATTERN) )
		if args['action'] == "position":
			POSITIONS=posiStartPatternREGEXP(SEQ,PATTERN) #using only the start, but possible to search also for the end, can then return the middle etc.
			OUTVALUE.append( ",".join([str(el) for el in POSITIONS]) ) #no need to add 1 at the coordinates: already done
		
	###################
	if NOTINFILE:
		OUT.write( sep.join( [str(e) for e in OUTVALUE ] ) + '\n')
	else:
		OUT.write( sep.join( [str(e) for e in splitLINE + OUTVALUE ] ) + '\n')
