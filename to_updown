#!/usr/bin/python
import sys,re,os,argparse,datetime
parser = argparse.ArgumentParser(description="Print line plus the element(s) of the previous-next line asked in cols. REQUIRED a header, avoid name errors",epilog='Author: Gildas Lepennetier: gildas.lepennetier@hotmail.fr')
parser.add_argument('-in', required=False, type=argparse.FileType('r'),default=sys.stdin, help='input file')
parser.add_argument('-out', required=False, type=argparse.FileType('w'),default=sys.stdout, help='output file')
parser.add_argument('-sep',type=str,default='\t',required=False,help='separator (default: \\t)')
parser.add_argument('-endline',type=str,default='\n',required=False,help='separator (default: unix \\n)')
parser.add_argument('--version', action='version', version='%(prog)s v1.0')#version display
parser.add_argument('--verbose', '-v', action='count',default=0,help='add flag(s) to increase verbosity')# count the level of verbosity, +1 for each -v flag
parser.add_argument('-parent',type=int,required=True,help='column number for the parent. Data will be concatenated using this. Be cafeful with duplicates')
parser.add_argument('-cols',type=int,nargs='+',required=True,help='column(s) to keep')
parser.add_argument('-progress',default=False,action='store_true',help='add this flag if you want to have a progress estimate. this put also one flag --verbose')
parser.add_argument('--copy',action='store_true',help='Display Copyright informations')
parser.add_argument('--author',action='store_true',help='Display author informations')
args=vars(parser.parse_args())
if args['author']:
	print ("LEPENNETIER Gildas - gildas.lepennetier@hotmail.fr")
	exit()
if args['copy']:
	print ("Copyright 2014 LEPENNETIER Gildas")
	exit()
#transform the index of columns in python index-1
parent_index =args['parent']-1
cols_list=[]
for i in args['cols']:
    cols_list.append(int(i)-1)
if args['progress']:
    args['verbose']+=1
if args['verbose'] > 0:
    sys.stderr.write("Loading genes%s"%(args['endline']))
Lines = args['in'].readlines()
# print first line and others lines in cols
firstlineSplit=Lines[0].split(args['endline'])[0].split(args['sep'])
args['out'].write(args['sep'].join(firstlineSplit+['up_%s'%(el) for el in [firstlineSplit[index] for index in cols_list]]+['down_%s'%(el) for el in [firstlineSplit[index] for index in cols_list]])   + args['endline'])
Lines=Lines[1:]
#### Gathering :  lines .split() BY parent. slow version but no mistake if file is not in order
#parallelisation here?
DICO={}
nbTot=len(Lines)
kk=0
for rline in Lines:
    kk+=1
    if kk % 100 == 0 and args['progress']:
        sys.stderr.write("\r%s %% - (%s / %s) - %s"%( round(float(kk)/nbTot*100,1),kk,nbTot,datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    if kk == nbTot and args['progress']:
        sys.stderr.write("\r%s %% - (%s / %s) - %s%s"%( round(float(kk)/nbTot*100,1),kk,nbTot,datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),args['endline']))
    line=rline.split(args['endline'])[0]
    parent=line.split(args['sep'])[parent_index]
    if parent not in DICO.keys():
        DICO[parent]=[line.split(args['sep'])]
    elif parent in DICO.keys():
        DICO[parent].append(line.split(args['sep']))
ALL_KEYS=DICO.keys()
ALL_KEYS.sort()
if args['verbose'] > 0:
    sys.stderr.write("Extracting informations up and down%s"%(args['endline']))
kk=0
nbTot=len(ALL_KEYS)
for CLE in ALL_KEYS:
    kk+=1
    if kk % 100 == 0 and args['progress']:
        sys.stderr.write("\r%s %% - (%s / %s) - %s"%( round(float(kk)/nbTot*100,1),kk,nbTot,datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    if kk == nbTot and args['progress']:
        sys.stderr.write("\r%s %% - (%s / %s) - %s%s"%( round(float(kk)/nbTot*100,1),kk,nbTot,datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),args['endline']))
    LISTES=DICO[CLE]#list of line (line is a list of col)
    for index_LISTES in range(0, len(LISTES)):
        cur_line=LISTES[index_LISTES]
        if len(LISTES) > 1:
            if index_LISTES == 0: #no previous
                next_line=LISTES[index_LISTES+1]
                #original line + empty for previous + column for next line
                LINEOUT= cur_line + ['' for el in cols_list ]  + [ next_line[index_col] for index_col in cols_list ]
            elif index_LISTES == len(LISTES) -1 : #no next. -1 because of python range
                prev_line=LISTES[index_LISTES-1]
                LINEOUT= cur_line + [ prev_line[index_col] for index_col in cols_list ] + ['' for el in cols_list ]
            else: #both previous and next
                prev_line=LISTES[index_LISTES-1]
                next_line=LISTES[index_LISTES+1]
                LINEOUT= cur_line + [ prev_line[index_col] for index_col in cols_list ] + [ next_line[index_col] for index_col in cols_list ]
        else:
            LINEOUT= cur_line + ['' for el in cols_list ] + ['' for el in cols_list ]
        args['out'].write(args['sep'].join( [ str(el) for el in LINEOUT ] ) + args['endline'] )