#!/usr/bin/python
# -*- coding: utf-8 -*-
#OUTPUT: only starts and ends
import sys,argparse,datetime
parser = argparse.ArgumentParser(description='Conversion of exons starts-ends in introns stats-ends (same column, coma-sep also). Coordinates should be in column, one row per isoform, and in a coma-separated way',epilog='Author: Gildas Lepennetier: glepe_01@wwu.de')
parser.add_argument('-in', required=False, type=argparse.FileType('r'),default=sys.stdin, help='input file')
parser.add_argument('-out', required=False, type=argparse.FileType('w'),default=sys.stdout, help='output file')
parser.add_argument('-sep',type=str,default='\t',required=False,help='separator (default: \\t)')
parser.add_argument('-append',action='store_true',default=False,help='add this flag if you want to append in the file')
parser.add_argument('-endline',type=str,default='\n',required=False,help='separator (default: unix \\n)')
parser.add_argument('--version', action='version', version='%(prog)s 07-18-2014')#version display
parser.add_argument('--verbose', '-v', action='count',default=0,help='add flag(s) to increase verbosity')# count the level of verbosity, +1 for each -v flag
parser.add_argument('-chr',default=1,type=int,required=False,help='column number for chromosome name (default=1)')
parser.add_argument('-id',default=2,type=int,required=False,help='column number for identifiant (default=2)')
parser.add_argument('-parent',default=3,type=int,required=False,help='column number for parent (default=3)')
parser.add_argument('-strand',default=4,type=int,required=False,help='column number for strand (default=4)')
parser.add_argument('-starts',default=5,type=int,required=False,help='column number for start of exons (coma-separated) (default=5)')
parser.add_argument('-ends',default=6,type=int,required=False,help='column number for ends of exons (coma-separated) (default=6)')
parser.add_argument('-EndByComa',action='store_true',default=False,help='add this flag if last element in starts/ends is a coma')
parser.add_argument('-header',action='store_true',default=False,help='add this flag if you have an header (fist line with names of columns)')
parser.add_argument('-progress',default=False,action='store_true',help='add this flag if you want to have a progress estimate. this put also one flag --verbose')
parser.add_argument('--copy',action='store_true',help='Display Copyright informations')
parser.add_argument('--author',action='store_true',help='Display author informations')
args=vars(parser.parse_args())
if args['author']:
	print ("LEPENNETIER Gildas - gildas.lepennetier@hotmail.fr")
	exit()
if args['copy']:
	print ("Copyright 2014 LEPENNETIER Gildas")
	exit()
VERB_LVL=args['verbose']
OUT=args['out']
sep=args['sep']
starts_index=int(args['starts'])-1
ends_index  =int(args['ends']  )-1
chr_index   =int(args['chr']   )-1
strand_index=int(args['strand'])-1
id_index    =int(args['id'])    -1
parent_index=int(args['parent'])-1
#######################     MAIN        ##############
######## print for each line line
Lines = args['in'].readlines()
nbLines=0
if args['header']: #skip first line
        nbLines+=1
	if args['append']:
		FL=Lines[0].split(args['endline'])[0].split(sep)
		LISTE= FL + ["%s_iStarts"%(FL[starts_index]),"%s_iEnds"%(FL[ends_index]) ]
		args['out'].write( sep.join( [str(el) for el in LISTE] )+args['endline'] )
	else:
		LISTE=["chr","id","parent","strand", "intronStarts","intronEnds" ]
		args['out'].write( sep.join( [str(el) for el in LISTE] )+args['endline'] )
	Lines=Lines[1:]#actually removing the first line

kk=0
nbTot=len(Lines)
for line in Lines:
        kk+=1
        if kk % 100 == 0 and args['progress']:
                sys.stderr.write("\r%s %% - (%s / %s) - %s"%( round(float(kk)/nbTot*100,1),kk,nbTot,datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
        if kk == nbTot and args['progress']:
                sys.stderr.write("\r%s %% - (%s / %s) - %s%s"%( round(float(kk)/nbTot*100,1),kk,nbTot,datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),args['endline']))

	nbLines+=1
	lineSplit=line.split(args['endline'])[0].split(sep)
	LISTE=[]
	#careful: order in list
	chro  =lineSplit[chr_index]
	id    =lineSplit[id_index]
	parent=lineSplit[parent_index]
	strand=lineSplit[strand_index]
	starts=lineSplit[starts_index].split(',')
	ends  =lineSplit[ends_index].split(',')
	if args['EndByComa']: #if the list end with a coma, the last element is empty after the split, we remove it
		starts=starts[:-1]
		ends=ends[:-1]
	if len(starts) != len(ends):
		print("WARNING: gene %s (line %s) have not a correct number of starts and ends of exons"%(parent,nbLines))
		continue
	
	if len(starts) == 1: #if no intron(s), continue
		if args['append']:
			LISTE=lineSplit+["",""]
		else:
			LISTE=[chro,id,parent,strand, "",""  ]
		args['out'].write( sep.join( [str(el) for el in LISTE] )+args['endline'] )
		continue
	
	starts=[int(el) for el in starts]#exonic starts
	ends  =[int(el) for el in ends]
	starts.sort()
	ends.sort()
	#conversion in intron starts-end:
	iStarts=[]
	iEnds=[]
	nbOfIntrons=len(starts)-1
	for index in range(0,nbOfIntrons,1):
		iStarts.append(  ends[index]   +1  ) #+1 to exclude last nt of the exon
		iEnds.append(  starts[index+1] -1  ) #-1 same reason, the intron stop 1 nt before the start of the next exon
	
	if args['append']:
		LISTE= lineSplit + [",".join([str(el) for el in iStarts]),",".join([str(el) for el in iEnds])  ]
		args['out'].write( sep.join( [str(el) for el in LISTE] )+args['endline'] )
	else:
		LISTE=[chro,id,parent,strand, ",".join([str(el) for el in iStarts]),",".join([str(el) for el in iEnds])  ]
		args['out'].write( sep.join( [str(el) for el in LISTE] )+args['endline'] )
