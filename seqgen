#!/usr/bin/python
#coding: utf-8
import argparse
import itertools
import re
parser = argparse.ArgumentParser(description='Create sequences.',epilog='Author: Gildas Lepennetier: gildas.lepennetier@hotmail.fr')
parser.add_argument('-l','-length',type=int,help='Length of the sequence.')#todo: Can be coma separated in the form: from,to or from,to,by ??
parser.add_argument('-n','-number',type=int,default=0,help='Number of line to print. 0 (default) for all possibilities')
parser.add_argument('-a','-alphabet',help='Alphabet to use.')
parser.add_argument('-i','-insensitive',action='store_true',help='Case insensitive, output will be in lower case.')
parser.add_argument('-u','-upper',action='store_true',help='Converted output to upper case.')
parser.add_argument('-r','-restrictions',action='append',help='Restriction to use. Give in the form <position>:<letter> example 2:G for 2ond letter to be a G. Can be cumulated: 2:G,99:x')
parser.add_argument('-p','-possibilities',action='store_true',help='Calculate all possibilities')
parser.add_argument('-R','-Random',action='store_true',help='Output random. Carefull: need to make all the possibilities to return something random.')
parser.add_argument('-V','--version', action='version', version='%(prog)s 29-04-2015')
parser.add_argument('-C','--copy',action='store_true',help='Display Copyright informations')
parser.add_argument('-A','--author',action='store_true',help='Display author informations')
args=vars(parser.parse_args())
if args['author']:
	print ("LEPENNETIER Gildas - gildas.lepennetier@hotmail.fr")
	exit()
if args['copy']:
	print ("Copyright 2015 LEPENNETIER Gildas")
	exit()
if not args['l']:
	print ("Error: length of sequence required")
	exit()
if not args['a']:
	print ("Error: alphabet required")
	exit()
if args['p']:
	import math
	try:
		print (  math.pow( len(args['a']),  (args['l'] - len(args['r']) ) ) )
	except TypeError: #because restriction can be None
		print (  math.pow( len(args['a']),  args['l'] ) )
			
	exit()
L=int(args['l'])#split(',')
A=[a for a in args['a']] 
if args['i']:#case insensitive: everything lower
	A=[a.lower() for a in A]
if args['u']:#if output upper: everything upper
	A=[a.upper() for a in A]
A=list(set(A))#remove duplicates in alphabet
generator = itertools.product( ''.join(A), repeat=L)
if args['r']:
	pos=[]#position
	res=[]#restriction
	#extract restriction, organize in a list of position and list of letter
	for r in ','.join(args['r']).split(','):
		_1=r.split(':')[0]
		_2=r.split(':')[1]
		if int(_1) <= L:
			pos.append(int(_1)-1)#python index: -1
		else:
			print ("Error: restriction '%s' can not be apply: position '%s' out of range"%(r,_1))
			exit()
		if _2 in A:
			res.append(_2)
		else:
			print ("Error: restriction '%s' can not be apply: letter '%s' not in alphabet"%(r,_2))
			exit()


if args['R']:
	import random
	LISTALL=[]
	for a in generator:
		item=''.join(a)
		if args['r']: #if restriction
			P=True
			for i in range(0,len(args['r'])):
				if item[pos[i]] != res[i]:
					P=False #if item do not respect the restriction, do not print
			if P:
				LISTALL.append(item)
		else:
			LISTALL.append(item)
	random.shuffle(LISTALL)
	k=0 # counter for number of output
	for item in LISTALL:
		k+=1
		print(item)
		if args['n'] != 0: 
			if args['n'] == k:
				break #break if we reached number of printed lines
else:
	k=0 # counter for number of output
	for a in generator:
		item=''.join(a)
		if args['r']: #if restriction
			P=True
			for i in range(0,len(args['r'])):
				if item[pos[i]] != res[i]:
					P=False #if item do not respect the restriction, do not print
			if P:
				k+=1
				print(item)
		else:
			k+=1
			print(item)

		if args['n'] != 0: 
			if args['n'] == k:
				break #break if we reached number of printed lines
	
