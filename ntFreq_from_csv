#!/usr/bin/python
import sys,argparse
parser = argparse.ArgumentParser(description='Extract feature from .csv file.',epilog='Author: Gildas Lepennetier: gildas.lepennetier@hotmail.fr')
parser.add_argument('-in', required=False,type=argparse.FileType('r'),default=sys.stdin, help='input file')
parser.add_argument('-out',required=False,type=argparse.FileType('w'),default=sys.stdout, help='output file')
parser.add_argument('-sep',type=str,default='\t',required=False,help='separator (default: \\t)')
parser.add_argument('-endline',type=str,default='\n',required=False,help='separator (default: unix \\n)')
parser.add_argument('--version', action='version', version='%(prog)s')#version display
parser.add_argument('--verbose', '-v', action='count',default=0,help='add flag(s) to increase verbosity')# count the level of verbosity, +1 for each -v flag
parser.add_argument('-sequence',type=int,required=True,help='column number for sequence')
parser.add_argument('-header',default=False,action='store_true',help='add this flag if you have a header')
parser.add_argument('-append',default=False,action='store_true',help='add this flag if you want to append in the file')
parser.add_argument('--copy',action='store_true',help='Display Copyright informations')
parser.add_argument('--author',action='store_true',help='Display author informations')
args=vars(parser.parse_args())
if args['author']:
	print ("LEPENNETIER Gildas - gildas.lepennetier@hotmail.fr")
	exit()
if args['copy']:
	print ("Copyright 2014 LEPENNETIER Gildas")
	exit()
VERB_LVL=args['verbose']
sep=args['sep']

seq_index=int(args['sequence'])-1

# COUNT OF LETTER 
# return dico of frequency for each letter in letter list
def countLetters(string, case=False, freq=True, removeNn=False):
    #dico={}
    dico={'A':0.0,'C':0.0,'G':0.0,'T':0.0}
    if string:
	nb_letters=float(0)

	for letter in string:
	    nb_letters+=1

	    if removeNn:
		if letter in ['n','N']:
		    nb_letters -=1
		    continue
	    if not case: #no matter the case
                if letter.upper() in dico.keys():
		    dico[letter.upper()]+=1
		else:
		    dico[letter.upper()]=1
	    else: #count upper and lower case
		if letter in dico.keys():
		    dico[letter]+=1
		else:
		    dico[letter]=1        
	# return number or frequency
	dico['nb']=nb_letters

	if freq:
	    for key in dico.keys():
		if key not in ['nb']:
		    if dico[key] != 0:
			dico[key] = dico[key]/dico['nb']
	return dico
    else:
	return {}
#######################     MAIN        ##############
Lines = args['in'].readlines()

if args['header']: #skip first line
    #LineName=Lines[0].split(args['endline'])[0].split(sep)[seq_index]#strip if last one
    FL=Lines[0].split(args['endline'])[0].split(sep)
    if args['append']:
	args['out'].write(sep.join( FL + [ "%s_A"%FL[seq_index],"%s_C"%FL[seq_index],"%s_G"%FL[seq_index],"%s_T"%FL[seq_index] ] ) + args['endline'])
    else:
	args['out'].write( sep.join( [ "%s_A"%FL[seq_index],"%s_C"%FL[seq_index],"%s_G"%FL[seq_index],"%s_T"%FL[seq_index] ] ) + args['endline'])
    Lines=Lines[1:]
for rline in Lines:
    line=rline.split(args['endline'])[0].split(sep)
    SEQ=line[seq_index]

    DICO=countLetters(SEQ, case=False, freq=True, removeNn=False)
    
    LINE= [ str(DICO['A']) , str(DICO['C']) , str(DICO['G']) , str(DICO['T']) ]

    if args['append']:
        args['out'].write(sep.join( line + LINE ) + args['endline'])
    else:
        args['out'].write( sep.join( LINE ) + args['endline'])        
