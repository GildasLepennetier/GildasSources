#!/usr/bin/python
# -*- coding: utf-8 -*-
import sys,argparse

try:
	sys.path.append('.')#to be able to import the reverse complement function on the same directory
	from reverse_complement import revCompl_DNA
except ImportError:
	sys.stderr.write("ImportError: Please check that the file reverse_complement is on the same folder as %s"%argv[0])
	
# calculate number of match/mismatch
def match_count(string,ref,to_upper=False):
	if to_upper:
		if not string.isupper():
			string=string.upper()
		if not ref.isupper():
			ref=ref.upper()
	else:
		string,ref=str(string),str(ref)
		
	if len(string) == len(ref):
		_c=0
		for i in range(0,len(string)):
			if string[i] == ref[i]:
				_c+=1
		return _c
	else:
		sys.stderr.write("Error: sequence length are different: %s =/= %s\n"%(string,ref))
		exit(1)

#raw sequences (position 3 to 10 in U1 sequence, at least for humans)

### to do: load the rfam auto and grep from it ###

COR={
	"Homo_sapiens":"ACTTACCT",
	"Macaca_mulatta":"ACTTACCT",
	"Mus_musculus":"ACTTACCT",
	"Rattus_norvegicus":"ACTTACCT",
	"Mustela_putorius":"ACTTACCT",
	"Bos_taurus":"ACTTACCT",
	"Monodelphis_domestica":"ACTTACCT",
	"Ornithorhynchus_anatinus":"ACTTACCT",
	"Gallus_gallus":"ACTTACCT",
	"Danio_rerio":"ACTTACCT",
	"Takifugu_rubripes":"ACTTACCT",
	"Xenopus_tropicalis":"ACTTACCT",
	"Drosophila_melanogaster":"ACTTACCT",
	"Drosophila_yakuba":"ACTTACCT",
	"Arabidopsis_thaliana":"ACTTACCT",
	"Caenorhabditis_elegans":"ACTTACCT",
	"Paramecium_tetraurelia":"ACTTACCT",
	}
# make the reverse complement for the matching
COR={ k : revCompl_DNA(s) for k,s in COR.items() }


parser = argparse.ArgumentParser(description='Compute a score for a given donor splice site. Like percentage of match, so higher score = better match',epilog='Author: Gildas Lepennetier: gildas.lepennetier@hotmail.fr')
parser.add_argument('-in',type=argparse.FileType('r'),default=sys.stdin, help='input file')
parser.add_argument('-out',type=argparse.FileType('w'),default=sys.stdout, help='output file')

parser.add_argument('-seq5',type=int,help="Column number for the 5'splice site sequence")

parser.add_argument('-species',type=str,help='Species name.')

parser.add_argument('-display',action='store_true',default=False,help='Only display the sequence of the corresponding species, format: <species>,<sequence of U1>,<Reverse complement of the sequence>')

parser.add_argument('-av',action='store_true',default=False,help='Print only the available species.\nIf your species is not on the list, think about picking a close relative.')

parser.add_argument('-rna',action='store_true',default=False,help='If the given splice site is RNA, default is DNA')
parser.add_argument('-i',action='store_true',default=False,help='To make the function case-insensitive')

parser.add_argument('-count_only',action='store_true',default=False,help='Only to count the number of matches with the sequence')
parser.add_argument('-mismatch',action='store_true',default=False,help='Count the number of mis-matches instead of matches')

# TO DO : load and parse the rfam fasta file
#parser.add_argument('-rfam_u1',type=str,help="Path to the fasta file containing U1's sequences, and matching from position 3:10")
#parser.add_argument('-link_rfam_file_u1',type=str,default='ftp://ftp.ebi.ac.uk/pub/databases/Rfam/CURRENT/fasta_files/RF00003.fa.gz',help="Link to the fasta file with U1's sequences")

# the 3' splice site cannot be done like that, no information about U2AF on http://rfam.xfam.org/family/U2
#parser.add_argument('-rfam_file_u5',type=str,help="Path to the fasta file containing U5's sequences, ")
#parser.add_argument('-link_rfam_file_u5',type=str,default='ftp://ftp.ebi.ac.uk/pub/databases/Rfam/CURRENT/fasta_files/RF00020.fa.gz',help="Link to the fasta file with U5's sequences")
#parser.add_argument('-rfam_file_u2',type=str,help="Path to the fasta file containing U5's sequences, ")
#parser.add_argument('-link_rfam_file_u2',type=str,default='ftp://ftp.ebi.ac.uk/pub/databases/Rfam/CURRENT/fasta_files/RF00004.fa.gz',help="Link to the fasta file with U2's sequences")

parser.add_argument('-header',action='store_true',default=False,help='add this flag if you have an header (fist line with names of columns)')
parser.add_argument('-sep',type=str,default='\t',help='Separator (default: \\t)')
parser.add_argument('--copy',action='store_true',help='Display Copyright informations')
parser.add_argument('--author',action='store_true',help='Display author informations')

parser.add_argument('--version', action='version', version='%(prog)s v1 05-09-2016')#version display
#parser.add_argument('--verbose', '-v', action='count',default=0,help='add flag(s) to increase verbosity')# count the level of verbosity, +1 for each -v flag

args=vars(parser.parse_args())

if args['author']:
	sys.stderr.write ("LEPENNETIER Gildas - gildas.lepennetier@hotmail.fr\n")
	exit()
if args['copy']:
	sys.stderr.write ("Copyright 2016 LEPENNETIER Gildas\n")
	exit()
	
if args['av']:
	print('Available:\n\t%s'%('\n\t'.join(COR.keys())))
	exit()

#checksseq2	

if args['seq5'] <= 0:
	sys.stderr.write("Error: please give -seq5 for %s.\nUse -h to get help\n"%(sys.argv[0].split('/')[-1]))
	exit(1)
args['seq5']=args['seq5']-1
if not args['species']:
	sys.stderr.write("Error: please specify the -species option.\nUse -h to get help\n")
	exit(1)
args['species'] = args['species'].capitalize() # in case of lower case given for first letter... make it easier for user
if args['species'] not in COR.keys():
	sys.stderr.write("Error: species %s not available.\nPlease select on of the following: %s\n"%(args['species'],', '.join(COR.keys())))
	exit(1)

if args['display']:
	print("%s,%s,%s"%(args['species'], revCompl_DNA( COR[args['species']] ),COR[args['species']])) #re-reverse complement to get the original
	exit()
	
# calculate and print the scores
k=0
for rline in args['in'].readlines(): #no need to load everything in memory using readlines()
	k+=1
	line=rline.split('\n')[0].split(args['sep'])
	if args['header'] and k== 1:
		ADD=[]
		if args['seq5']:
			ADD.append("score5")
		args['out'].write( args['sep'].join( line + ADD) + '\n'  )
		continue #skip

	SEQ=line[ args['seq5'] ] #get the sequence
	if args['rna']:
		SEQ.replace("U","T").replace("u","t")
	
	MATCHES=match_count(  SEQ, COR[args['species']], args['i'] )
	
	if args['count_only']:
		SCORE = MATCHES
	elif args['mismatch']:
		SCORE = len(SEQ) - MATCHES #length minus matches = mismatches
	else: #default = score in % of match. need a floating number for division
		SCORE = float(MATCHES) / len(SEQ) * 100
		
	args['out'].write( args['sep'].join( line + [str(SCORE)] ) + '\n'  )
