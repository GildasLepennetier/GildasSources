#!/usr/bin/python
# -*- coding: utf-8 -*-
import sys,argparse
# Give the reverse complement of a DNA sequence, change also if iupac nucleotide ####
def revCompl_DNA(seq):
	reverse = []
	if seq:
		for letter in seq: #remplir avec le complementaire
			COR={"A":"T","a":"t","C":"G","c":"g","G":"C","g":"c","T":"A","t":"a",#usual ACGT, case conserve
				"R":"Y","r":"y","Y":"R","y":"r",#iupac R=A/G, Y=C/T
				"S":"W","s":"w","W":"S","w":"s",#S=G/C, W=A/T
				"K":"M","k":"m","M":"K","m":"k",#K=G/T, M=A/C
				"B":"V","b":"v","V":"B","v":"b",# B=C/G/T, V=A/C/G
				"D":"H","d":"h","H":"D","h":"d"}# D=A/G/T, H=A/C/T
			if letter in COR.keys():
				reverse.append(COR[letter])
			elif letter in ['u','U']:
				print ('error, must work on DNA, and I found nome U or u')
			else:
				reverse.append(letter)
		return ''.join(reverse[::-1]) #inverser
	else:
		return ""
COR={
	"homo_sapiens":"GGTAAG",
	"mus_musculus":"GGTAAG",
	"drosophila_melanogaster":"GGTAAG",
	}

parser = argparse.ArgumentParser(description='Compute a score for a given splice site.',epilog='Author: Gildas Lepennetier: gildas.lepennetier@hotmail.fr')
parser.add_argument('-in',type=argparse.FileType('r'),default=sys.stdin, help='input file')
parser.add_argument('-out',type=argparse.FileType('w'),default=sys.stdout, help='output file')

parser.add_argument('-seq5',type=int,help="Column number for the 5'splice site sequence")
parser.add_argument('-seq3',type=int,help="Column number for the 3'splice site sequence")

parser.add_argument('-species',type=str,required=True,help='Species short name, in the following list: %s'%(', '.join(COR.keys())))

parser.add_argument('-rna',action='store_true',default=False,help='If the given splice site is RNA, default is DNA')

parser.add_argument('-rfam_file_u1',type=str,help="Path to the fasta file containing U1's sequences, and matching from position 3:10")
parser.add_argument('-link_rfam_file_u1',type=str,default='ftp://ftp.ebi.ac.uk/pub/databases/Rfam/CURRENT/fasta_files/RF00003.fa.gz',help="Link to the fasta file with U1's sequences")


#parser.add_argument('-rfam_file_u5',type=str,help="Path to the fasta file containing U5's sequences, ")
#parser.add_argument('-link_rfam_file_u5',type=str,default='ftp://ftp.ebi.ac.uk/pub/databases/Rfam/CURRENT/fasta_files/RF00020.fa.gz',help="Link to the fasta file with U5's sequences")
#parser.add_argument('-rfam_file_u2',type=str,help="Path to the fasta file containing U5's sequences, ")
#parser.add_argument('-link_rfam_file_u2',type=str,default='ftp://ftp.ebi.ac.uk/pub/databases/Rfam/CURRENT/fasta_files/RF00004.fa.gz',help="Link to the fasta file with U2's sequences")


parser.add_argument('-header',action='store_true',default=False,help='add this flag if you have an header (fist line with names of columns)')
parser.add_argument('-sep',type=str,default='\t',help='Separator (default: \\t)')
parser.add_argument('-endline',type=str,default='\n',help='End of line (default: unix \\n)')
parser.add_argument('--copy',action='store_true',help='Display Copyright informations')
parser.add_argument('--author',action='store_true',help='Display author informations')

parser.add_argument('--version', action='version', version='%(prog)s 05-09-2016')#version display
#parser.add_argument('--verbose', '-v', action='count',default=0,help='add flag(s) to increase verbosity')# count the level of verbosity, +1 for each -v flag

args=vars(parser.parse_args())

if args['author']:
	sys.stderr.write ("LEPENNETIER Gildas - gildas.lepennetier@hotmail.fr"+args['endline'])
	exit()
if args['copy']:
	sys.stderr.write ("Copyright 2016 LEPENNETIER Gildas"+args['endline'])
	exit()

if not args['seq5'] and not args['seq3']:
	sys.stderr.write("Error: please give -seq5 or -seq3 for %s%s"%(sys.argv[0].split('/')[-1],args['endline']))
	exit(1)

# get the informations about U1

# get informations about U5

# calculate and print the scores
k=0
for rline in args['in'].readlines():
	k+=1
	line=rline.split(args['endline'])[0].split(args['sep'])
	if args['header'] and k== 1:
		ADD=[]
		if args['seq5']:
			ADD.append("score5")
		if args['seq3']:
			ADD.append("score3")
		args['out'].write( args['sep'].join( line + ADD) + args['endline']  )
		continue
	if args['seq5']:
		line[ args['seq5'] ]
	if args['seq3']:
		line[ args['seq3'] ]
		
	#if args['rna']:revCompl_DNA()
	