#!/usr/bin/python
# -*- coding: utf-8 -*-
import sys,re,os,argparse,datetime
from numpy import median
parser = argparse.ArgumentParser(description='Performs operation line by line, on a given column, on floats.',epilog='Author: Gildas Lepennetier: gildas.lepennetier@hotmail.fr')
parser.add_argument('-in', required=False, default=sys.stdin ,type=argparse.FileType('r'),help='input file')
parser.add_argument('-out', required=False, type=argparse.FileType('w'),default=sys.stdout, help='output file')
parser.add_argument('-action',type=str,required=True,help='action to perform on the integers in the column [min, max, mean, median, sum] ')
parser.add_argument('-sep',type=str,default='\t',required=False,help='initial separator (default: \\t)')
parser.add_argument('-endline',type=str,default='\n',required=False,help='end of line (default: unix \\n)')
parser.add_argument('--version', action='version', version='%(prog)s 06-17-2014')#version display
parser.add_argument('--verbose', '-v', action='count',default=0,help='add flag(s) to increase verbosity')# count the level of verbosity, +1 for each -v flag
parser.add_argument('-col',type=int,required=True,help='column where to make operation')
parser.add_argument('-header',action='store_true',default=False,help='add this flag if file have a header.')
parser.add_argument('-delim',type=str,default=',',required=False,help='separator of integer values (default: ,)')
parser.add_argument('-decimal',type=str,default='.',required=False,help='decimal mark for values (default: .)')
parser.add_argument('-toint',action='store_true',default=False,help='"to integer". Add this flag to avoid having a float when integers are expected. Careful: will truncate the result')
parser.add_argument('--copy',action='store_true',help='Display Copyright informations')
parser.add_argument('--author',action='store_true',help='Display author informations')
args=vars(parser.parse_args())
if args['author']:
	print ("LEPENNETIER Gildas - gildas.lepennetier@hotmail.fr")
	exit()
if args['copy']:
	print ("Copyright 2014 LEPENNETIER Gildas")
	exit()
index_col = int(args['col']) -1
if args['decimal'] == args['delim']:
    sys.stderr.write("Error: decimal and delimiter are the same !")
    exit()
if args['action'] not in ['min','max','mean','median','sum','count']:
    sys.stderr.write("Error: please choose an action in [min, max, mean, median, sum, count] !")
    exit()
LINES=args['in'].readlines()
#k=0
if args['header']:
    #k+=1
    rline=LINES[0]
    line=rline.split(args['endline'])[0].split(args['sep'])
    args['out'].write ( args['sep'].join( [str(el) for el in line ] + ["%s_on_%s"%(args['action'],args['col'])]  ) + args['endline'])
    LINES=LINES[1:]
for rline in LINES:
    #k+=1
    #sys.stderr.write ("%s\n"%k)
    line=rline.split(args['endline'])[0].split(args['sep'])
    COL=line[index_col]
    if COL == '':
        args['out'].write ( args['sep'].join( [str(el) for el in line ] + [ '' ]  ) + args['endline'])
        continue
    Nbs=COL.split(args['delim'])
    NUMBERS=[]
    for el in Nbs:
        if args['action'] in ['min','max','mean','median','sum']:#need floats
            NUMBERS.append( float( el.replace(args['decimal'],'.') ) )
        if args['action'] in ['count']:#just need strings
            NUMBERS.append( el )
    if args['action'] == 'min':
        RESULT=min(NUMBERS)
    if args['action'] == 'max':
        RESULT=max(NUMBERS)
    if args['action'] == 'mean':
        RESULT=sum(NUMBERS)/float(len(NUMBERS))
    if args['action'] == 'median':
        RESULT=median(NUMBERS)
    if args['action'] == 'sum':
        RESULT=sum(NUMBERS)
    if args['action'] == 'count':
        if NUMBERS:
            RESULT=len(NUMBERS)
        else:
            RESULT=0
    if args['toint']: #convert to integer
        RESULT=int(RESULT)
    args['out'].write ( args['sep'].join( [str(el) for el in line ] + [ str(RESULT) ]  ) + args['endline'])  

    
