#!/bin/bash
#first release 19 March 2014
############################ default values
CUR="$(pwd)"
VERSION="1.1 - 29.04.2015"
AUTHOR="Author: Gildas Lepennetier - gildas.lepennetier@hotmail.fr"
COPY="Copyright 2014 2015 LEPENNETIER Gildas"
MaxEntScript="$HOME/MaxEnt/"
MAXENTSCRIPTS="http://genes.mit.edu/burgelab/maxent/download/fordownload.tar.gz"
SEP="\t"
############################ define usage / help function
usage()
{
cat << EOF
usage: $(basename $0) -i path/to/file [-d donor | -a acceptor] [-f skip|keep header] [options]

	Output in the same file name with .MaxEnt extension

DESCRIPTION

	This script calculate splice site scores using the maximum entropy scoring.
	Only one splice site at a time: call the function with -a [acceptor] first, and then -d [donor].
	You can easily use the cut and paste function to keep only what you need.
	
	The donor splice site should be:
		-3 +6 (GT)
		Ex:
		AAGGTAACA
	The acceptor splice site should be:
		-20 +3 (AG)
		Ex:
		CCCGAATTCGTCATCTGCAGCAG
	This script check the size of the sequence, and the position of GT and AG.
	
ADVICE:

	Not tested in presence of Ns in splice site. -> perl script return nothing, so move all following results up -_-'

ARGUMENTS:

	OBLIGATORILY
	
	-i		Input file name
	-d		Donor splice site sequence index in the input file (first column = column 1)
	-a		Acceptor splice site sequence index in the input file
	-f keep|skip		Skip or not the first line in file (useful for name of columns, if you have an header, please use skip to avoid inclusion)
	
	OPTIONALS

	-o		Output file name			(default: <infile>.MaxEnt)
	-V		Display version
	-A		Display author
	-h		Display help and exit
	-s		Scripts for MaxEnt			(default: $MaxEntScript)
	-t		Separator				(default: tab >$SEP<)
	
	-----------------------
	$AUTHOR
	$VERSION
	$COPY

EOF
}



############################ parse arguments
# put colon ":" after arguments that need a value in a variable. Ex: the flag -h don't need a value. same for V and A
if [ $# -lt 1 ];then
	echo "Error, please give arguments"
	echo "Usage: $(basename $0) -i infile [-d index | -a index] [options, -h for help]"
	exit 1
fi

while getopts "i:d:a:o:f:t:VAh" OPTION; do
	case $OPTION in
		i) IN="$OPTARG";  ;;
		d) indexCol5ss="$OPTARG";;
		a) indexCol3ss="$OPTARG";;
		s) MaxEntScript="$OPTARG";;
		o) OUT="$OPTARG";;
		f) SkipFirst="$OPTARG";;
		t) SEP="$OPTARG";;
		V) echo $VERSION; exit 1;;
		A) echo $AUTHOR;  exit 1;;
		h) usage; exit 1;;
	esac
done

######## tests before run
# input file exist
if [ ! -e "$IN" ];then
	echo "Error, infile not found: '$IN'"
    exit 1
fi

# if oufile not set, make the default output name
if [ ! $OUT ];then
	OUT="$IN.MaxEnt"
fi

#check for index
if [ $indexCol5ss ];then
	if [ $indexCol3ss ];then
		echo "Error: please choose donor or acceptor scoring (give -a or -d with the index in file)"
		exit 1
	else
		TODO="donor"
	fi
else
	if [ $indexCol3ss ];then
		TODO="acceptor"
	else
		echo "Error: please choose donor or acceptor scoring (give -a or -d with the index in file)"
		exit 1
	fi
fi

#check for skip first line
if [[ "$SkipFirst" != "skip" && "$SkipFirst" != "keep" ]];then echo "Error, please give skip/keep to -f"; exit 1; fi

#check for Ns in the sequences
if [[ "$SkipFirst" == "skip" ]];then
	if [ $indexCol5ss ];then #check n N in donor
		NB=$(cut -f $indexCol5ss $IN | tail -n +2 | grep -in N | wc -l)
		if [ $NB -gt 0 ]; then echo "error: there are some N on your sequences: $NB";exit; fi
	fi
	if [ $indexCol3ss ];then #check n N in donor
		NB=$(cut -f $indexCol3ss $IN | tail -n +2 | grep -in N | wc -l)
		if [ $NB -gt 0 ]; then echo "error: there are some N on your sequences: $NB";exit; fi
	fi
fi

if [[ "$SkipFirst" == "keep" ]];then
	if [ $indexCol5ss ];then #check n N in donor
		NB=$(cut -f $indexCol5ss $IN | grep -in N | wc -l)
		if [ $NB -gt 0 ]; then echo "error: there are some N on your sequences: $NB";exit; fi
	fi
	if [ $indexCol3ss ];then #check n N in donor
		NB=$(cut -f $indexCol3ss $IN | grep -in N | wc -l)
		if [ $NB -gt 0 ]; then echo "error: there are some N on your sequences: $NB";exit; fi
	fi
fi




#scripts are there
if [ ! -d $MaxEntScript ];then
	echo "Error, scripts not found at: $MaxEntScript"
	echo -e "Downloading perl wrapers MaxEnt package:\nhttp://genes.mit.edu/burgelab/maxent/download/"
	wget -v "$MAXENTSCRIPTS"
	tar -xf fordownload.tar.gz
	rm fordownload.tar.gz
	mv "fordownload" "$HOME/MaxEnt"
	MaxEntScript="$HOME/MaxEnt"
fi

####################### MAIN #########################################
if [ $TODO == "donor" ];then
	#echo "donor"
	#extraction
	if [ $SkipFirst == "skip" ]; then
		awk "BEGIN { FS=\"$SEP\"}{if(NR > 1) print \$$indexCol5ss }" $IN > "five"
	else
		awk "BEGIN { FS=\"$SEP\"}{print \$$indexCol5ss }" $IN > "five"
	fi
	#check length of sequence
	line=$(tail -n 1 "five" | cut -f $indexCol5ss)
	SIZE=${#line}
	if [ $SIZE -ne 9 ];then echo "Error: your donor sequence has a size != 9 ($SIZE)";rm "five"; exit 1; fi
	#check GT
	GT=${line:3:2}
	if [ $GT != "GT" ];then echo "Error: your donor sequence does not have the correct GT ($GT)"; exit 1; fi
	#check number of lines
	REF=$(wc -l <$IN)
	if [ $SkipFirst == "skip" ]; then
		COUNT=$(( $(wc -l <"five") +1))
	else
		COUNT=$(( $(wc -l <"five") ))
	fi
	if [ $REF -ne $COUNT ];then
		echo "Error in MaxEnt: bad number of lines: five - $IN (check GT | skip first line) exit!"
		#rm "five"
		exit 1
	fi
	#move
	mv "five" "$MaxEntScript"
	cd "$MaxEntScript"
	#first line name
	if [ $SkipFirst == "skip" ];then
		echo -e "seq5\tMaxEnt5" > "five.MaxEnt"
	fi
	#compute
	perl score5.pl "five" >> "five.MaxEnt"
	#clean
	rm "five"
	#move back
	mv "five.MaxEnt" $CUR
	cd $CUR
	#paste
	cut -f 2 "five.MaxEnt" > "five.MaxEnt2"
	paste "$IN" "five.MaxEnt2" > "$OUT"
	#clean
	rm "five.MaxEnt" "five.MaxEnt2"
	
else

if [ $TODO == "acceptor" ];then
	#echo "acceptor"
	#extraction
	if [ $SkipFirst == "skip" ]; then
		awk "BEGIN { FS=\"$SEP\"}{if(NR > 1) print \$$indexCol3ss }" $IN > "three"
	else
		awk "BEGIN { FS=\"$SEP\"}{print \$$indexCol3ss }" $IN > "three"
	fi
	#check length of sequence
	line=$(tail -n 1 "three" | cut -f $indexCol3ss)
	SIZE=${#line}
	if [ $SIZE -ne 23 ];then echo "Error: your acceptor sequence has a size != 23 ($SIZE) exit! "; rm "three"; exit 1; fi
	#check AG
	AG=${line:18:2}
	if [ $AG != "AG" ];then echo "Error: your donor sequence does not have the correct AG ($AG) exit!"; exit 1; fi
	#check number of lines
	REF=$(wc -l <$IN)
	if [ $SkipFirst == "skip" ]; then
		COUNT=$(( $(wc -l <"three") +1))
	else
		COUNT=$(( $(wc -l <"three") ))
	fi
	if [ $REF -ne $COUNT ];then
		echo "Error in MaxEnt: bad number of lines: three - $IN (check AG | skip first line) exit!"
		#rm "three"
		exit 1
	fi
	#move
	mv "three" "$MaxEntScript"
	cd "$MaxEntScript"
	#first line name
	if [ $SkipFirst == "skip" ];then
		echo -e "seq3\tMaxEnt3"> "three.MaxEnt"
	fi
	#compute
	perl score3.pl "three" >> "three.MaxEnt"
	#clean
	rm "three"
	#move back
	mv "three.MaxEnt" $CUR
	cd $CUR
	#paste
	cut -f 2 "three.MaxEnt" > "three.MaxEnt2"
	paste "$IN" "three.MaxEnt2" > "$OUT"
	#clean
	rm "three.MaxEnt" "three.MaxEnt2"
fi
fi
